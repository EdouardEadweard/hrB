{% extends 'base.html.twig' %}

{% block title %}Modifier la demande de cong√© - HR Flow{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .leave-request-form {
            max-width: 800px;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            overflow: hidden;
        }

        .form-header {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .form-header h1 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
        }

        .form-header p {
            margin: 0.5rem 0 0 0;
            opacity: 0.9;
            font-size: 1rem;
        }

        .form-body {
            padding: 2rem;
        }

        .status-banner {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-weight: 500;
        }

        .status-pending {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            color: #92400e;
        }

        .status-approved {
            background: #d1fae5;
            border: 1px solid #10b981;
            color: #065f46;
        }

        .status-rejected {
            background: #fee2e2;
            border: 1px solid #ef4444;
            color: #991b1b;
        }

        .status-cancelled {
            background: #f3f4f6;
            border: 1px solid #9ca3af;
            color: #374151;
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .form-section-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e2e8f0;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
        }

        .form-group .required {
            color: #dc2626;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.2s ease;
            box-sizing: border-box;
        }

        .form-control:focus {
            outline: none;
            border-color: #f59e0b;
            box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.1);
        }

        .form-control:disabled {
            background: #f9fafb;
            color: #6b7280;
            cursor: not-allowed;
        }

        .form-control.is-invalid {
            border-color: #dc2626;
            box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
        }

        .invalid-feedback {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: block;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .form-row-full {
            grid-column: 1 / -1;
        }

        .date-info {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }

        .date-info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .date-info-item:last-child {
            margin-bottom: 0;
            font-weight: 600;
            color: #1f2937;
            border-top: 1px solid #e2e8f0;
            padding-top: 0.5rem;
        }

        .balance-info {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .balance-info h4 {
            margin: 0 0 0.5rem 0;
            color: #92400e;
            font-size: 1rem;
        }

        .balance-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.25rem;
        }

        .modification-warning {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .modification-warning h4 {
            margin: 0 0 0.5rem 0;
            color: #92400e;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modification-warning ul {
            margin: 0;
            padding-left: 1.2rem;
            color: #92400e;
            font-size: 0.875rem;
        }

        .modification-warning ul li {
            margin-bottom: 0.25rem;
        }

        .original-values {
            background: #eff6ff;
            border: 1px solid #bfdbfe;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .original-values h4 {
            margin: 0 0 0.75rem 0;
            color: #1e40af;
            font-size: 1rem;
        }

        .original-value-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: white;
            border-radius: 6px;
        }

        .original-value-item:last-child {
            margin-bottom: 0;
        }

        .original-value-label {
            font-weight: 500;
            color: #374151;
        }

        .original-value-data {
            color: #1e40af;
            font-weight: 500;
        }

        .btn-group {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e5e7eb;
        }

        .btn {
            padding: 0.75rem 2rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);
        }

        .btn-primary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn-secondary:hover {
            background: #4b5563;
            transform: translateY(-1px);
        }

        .btn-danger {
            background: #dc2626;
            color: white;
        }

        .btn-danger:hover {
            background: #b91c1c;
            transform: translateY(-1px);
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
        }

        .alert-danger {
            background: #fee2e2;
            border: 1px solid #fecaca;
            color: #991b1b;
        }

        .manager-comment {
            background: #f0f9ff;
            border: 1px solid #0ea5e9;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .manager-comment h4 {
            margin: 0 0 0.5rem 0;
            color: #0c4a6e;
            font-size: 1rem;
        }

        .manager-comment p {
            margin: 0;
            color: #0c4a6e;
            font-style: italic;
        }

        .readonly-info {
            background: #f9fafb;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            text-align: center;
            color: #6b7280;
        }

        @media (max-width: 768px) {
            .leave-request-form {
                margin: 0 1rem;
            }

            .form-header {
                padding: 1.5rem;
            }

            .form-body {
                padding: 1.5rem;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .btn-group {
                flex-direction: column;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="container my-5">
    <div class="leave-request-form">
        <div class="form-header">
            <h1>Modifier la demande de cong√©</h1>
            <p>Demande #{{ leaveRequest.id }} - Soumise le {{ leaveRequest.submittedAt|date('d/m/Y √† H:i') }}</p>
        </div>

        <div class="form-body">
            {# Banni√®re de statut #}
            <div class="status-banner status-{{ leaveRequest.status|lower|replace({' ': '-'}) }}">
                {% if leaveRequest.status == 'En attente' %}
                    ‚è≥ <strong>Statut :</strong> En attente d'approbation
                {% elseif leaveRequest.status == 'Approuv√©' %}
                    ‚úÖ <strong>Statut :</strong> Demande approuv√©e
                {% elseif leaveRequest.status == 'Rejet√©' %}
                    ‚ùå <strong>Statut :</strong> Demande rejet√©e
                {% elseif leaveRequest.status == 'Annul√©' %}
                    üö´ <strong>Statut :</strong> Demande annul√©e
                {% else %}
                    üìã <strong>Statut :</strong> {{ leaveRequest.status }}
                {% endif %}
            </div>

            {# Commentaire du manager si pr√©sent #}
            {% if leaveRequest.managerComment %}
                <div class="manager-comment">
                    <h4>üí¨ Commentaire du manager</h4>
                    <p>"{{ leaveRequest.managerComment }}"</p>
                    {% if leaveRequest.approvedBy %}
                        <small>‚Äî {{ leaveRequest.approvedBy.firstName }} {{ leaveRequest.approvedBy.lastName }}, le {{ leaveRequest.processedAt|date('d/m/Y √† H:i') }}</small>
                    {% endif %}
                </div>
            {% endif %}

            {# Informations sur la possibilit√© de modification #}
            {% if leaveRequest.status == 'Approuv√©' or leaveRequest.status == 'Rejet√©' %}
                <div class="readonly-info">
                    üîí Cette demande ne peut plus √™tre modifi√©e car elle a √©t√© {{ leaveRequest.status|lower }}e.
                    <br>Pour effectuer des changements, veuillez contacter votre manager ou cr√©er une nouvelle demande.
                </div>
            {% elseif leaveRequest.status == 'En attente' %}
                <div class="modification-warning">
                    <h4>‚ö†Ô∏è Modification d'une demande en cours</h4>
                    <ul>
                        <li>Votre demande est actuellement en cours d'examen</li>
                        <li>Les modifications apporteront un nouveau d√©lai d'approbation</li>
                        <li>Le manager sera notifi√© des changements effectu√©s</li>
                        <li>Vous pouvez annuler cette demande si n√©cessaire</li>
                    </ul>
                </div>
            {% endif %}

            {# Valeurs originales pour r√©f√©rence #}
            <div class="original-values">
                <h4>üìã Valeurs actuelles de la demande</h4>
                <div class="original-value-item">
                    <span class="original-value-label">Type de cong√© :</span>
                    <span class="original-value-data">{{ leaveRequest.leaveType.name }}</span>
                </div>
                <div class="original-value-item">
                    <span class="original-value-label">P√©riode :</span>
                    <span class="original-value-data">Du {{ leaveRequest.startDate|date('d/m/Y') }} au {{ leaveRequest.endDate|date('d/m/Y') }}</span>
                </div>
                <div class="original-value-item">
                    <span class="original-value-label">Nombre de jours :</span>
                    <span class="original-value-data">{{ leaveRequest.numberOfDays }} jour{{ leaveRequest.numberOfDays > 1 ? 's' : '' }}</span>
                </div>
                <div class="original-value-item">
                    <span class="original-value-label">Motif :</span>
                    <span class="original-value-data">{{ leaveRequest.reason ?: 'Aucun motif sp√©cifi√©' }}</span>
                </div>
            </div>

            {# Informations sur les soldes (seulement si modification possible) #}
            {% if leaveRequest.status == 'En attente' %}
                <div class="balance-info">
                    <h4>üìä Vos soldes de cong√©s</h4>
                    <div class="balance-item">
                        <span>Cong√©s pay√©s restants :</span>
                        <strong>{{ app.user.leaveBalances|length > 0 ? app.user.leaveBalances[0].remainingDays : 'N/A' }} jours</strong>
                    </div>
                    <div class="balance-item">
                        <span>RTT restants :</span>
                        <strong>{{ app.user.leaveBalances|length > 1 ? app.user.leaveBalances[1].remainingDays : 'N/A' }} jours</strong>
                    </div>
                </div>
            {% endif %}

            {# Affichage des erreurs globales #}
            {% if form.vars.errors|length > 0 %}
                <div class="alert alert-danger">
                    <strong>Erreurs dans le formulaire :</strong>
                    {% for error in form.vars.errors %}
                        <div>{{ error.message }}</div>
                    {% endfor %}
                </div>
            {% endif %}

            {{ form_start(form, {'attr': {'novalidate': 'novalidate', 'id': 'leave-request-form'}}) }}

            <div class="form-section">
                <div class="form-section-title">üìÖ Informations de la demande</div>
                
                <div class="form-row">
                    <div class="form-group">
                        {{ form_label(form.leaveType, 'Type de cong√©', {'label_attr': {'class': 'required'}}) }}
                        {% if leaveRequest.status == 'En attente' %}
                            {{ form_widget(form.leaveType, {'attr': {'class': 'form-control' ~ (form.leaveType.vars.errors|length > 0 ? ' is-invalid' : ''), 'id': 'leave-type-select'}}) }}
                        {% else %}
                            {{ form_widget(form.leaveType, {'attr': {'class': 'form-control', 'disabled': true}}) }}
                        {% endif %}
                        {{ form_errors(form.leaveType, {'attr': {'class': 'invalid-feedback'}}) }}
                    </div>

                    <div class="form-group">
                        {{ form_label(form.status, 'Statut') }}
                        {{ form_widget(form.status, {'attr': {'class': 'form-control', 'readonly': true}}) }}
                        <small class="text-muted">Le statut est g√©r√© automatiquement</small>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        {{ form_label(form.startDate, 'Date de d√©but', {'label_attr': {'class': 'required'}}) }}
                        {% if leaveRequest.status == 'En attente' %}
                            {{ form_widget(form.startDate, {'attr': {'class': 'form-control' ~ (form.startDate.vars.errors|length > 0 ? ' is-invalid' : ''), 'id': 'start-date'}}) }}
                        {% else %}
                            {{ form_widget(form.startDate, {'attr': {'class': 'form-control', 'disabled': true}}) }}
                        {% endif %}
                        {{ form_errors(form.startDate, {'attr': {'class': 'invalid-feedback'}}) }}
                    </div>

                    <div class="form-group">
                        {{ form_label(form.endDate, 'Date de fin', {'label_attr': {'class': 'required'}}) }}
                        {% if leaveRequest.status == 'En attente' %}
                            {{ form_widget(form.endDate, {'attr': {'class': 'form-control' ~ (form.endDate.vars.errors|length > 0 ? ' is-invalid' : ''), 'id': 'end-date'}}) }}
                        {% else %}
                            {{ form_widget(form.endDate, {'attr': {'class': 'form-control', 'disabled': true}}) }}
                        {% endif %}
                        {{ form_errors(form.endDate, {'attr': {'class': 'invalid-feedback'}}) }}
                    </div>
                </div>

                {# Calcul automatique du nombre de jours (seulement si modification possible) #}
                {% if leaveRequest.status == 'En attente' %}
                    <div class="date-info" id="date-info">
                        <div class="date-info-item">
                            <span>Date de d√©but :</span>
                            <span id="display-start-date">{{ leaveRequest.startDate|date('l d F Y') }}</span>
                        </div>
                        <div class="date-info-item">
                            <span>Date de fin :</span>
                            <span id="display-end-date">{{ leaveRequest.endDate|date('l d F Y') }}</span>
                        </div>
                        <div class="date-info-item">
                            <span>Nombre de jours ouvr√©s :</span>
                            <span id="calculated-days">{{ leaveRequest.numberOfDays }} jour{{ leaveRequest.numberOfDays > 1 ? 's' : '' }}</span>
                        </div>
                    </div>
                {% endif %}
            </div>

            <div class="form-section">
                <div class="form-section-title">üìù D√©tails de la demande</div>
                
                <div class="form-group">
                    {{ form_label(form.reason, 'Motif de la demande') }}
                    {% if leaveRequest.status == 'En attente' %}
                        {{ form_widget(form.reason, {'attr': {'class': 'form-control' ~ (form.reason.vars.errors|length > 0 ? ' is-invalid' : ''), 'rows': 4, 'placeholder': 'D√©crivez bri√®vement le motif de votre demande de cong√©...'}}) }}
                        <small class="text-muted">Vous pouvez modifier le motif pour clarifier votre demande</small>
                    {% else %}
                        {{ form_widget(form.reason, {'attr': {'class': 'form-control', 'disabled': true, 'rows': 4}}) }}
                    {% endif %}
                    {{ form_errors(form.reason, {'attr': {'class': 'invalid-feedback'}}) }}
                </div>

                {# Champ cach√© pour le nombre de jours calcul√© automatiquement #}
                {{ form_widget(form.numberOfDays, {'attr': {'id': 'number-of-days-hidden'}}) }}
            </div>

            <div class="btn-group">
                <a href="{{ path('app_employee_leave_request_index') }}" class="btn btn-secondary">
                    ‚Üê Retour √† la liste
                </a>
                
                {% if leaveRequest.status == 'En attente' %}
                    <a href="{{ path('app_employee_leave_request_show', {id: leaveRequest.id}) }}" class="btn btn-secondary">
                        üëÅÔ∏è Voir les d√©tails
                    </a>
                    <button type="button" class="btn btn-danger" onclick="cancelRequest()">
                        üö´ Annuler la demande
                    </button>
                    <button type="submit" class="btn btn-primary" id="submit-btn">
                        üíæ Enregistrer les modifications
                    </button>
                {% else %}
                    <a href="{{ path('app_employee_leave_request_show', {id: leaveRequest.id}) }}" class="btn btn-primary">
                        üëÅÔ∏è Voir les d√©tails
                    </a>
                {% endif %}
            </div>

            {{ form_end(form) }}
        </div>
    </div>
</div>

{# Modal de confirmation pour l'annulation #}
{% if leaveRequest.status == 'En attente' %}
<div id="cancelModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 2rem; border-radius: 12px; max-width: 400px; width: 90%;">
        <h3 style="margin: 0 0 1rem 0; color: #dc2626;">üö´ Annuler la demande</h3>
        <p style="margin: 0 0 1.5rem 0; color: #374151;">
            √ätes-vous s√ªr de vouloir annuler cette demande de cong√© ? 
            Cette action est d√©finitive et vous devrez cr√©er une nouvelle demande si n√©cessaire.
        </p>
        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
            <button type="button" onclick="closeCancelModal()" style="padding: 0.5rem 1rem; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Non, conserver
            </button>
            <a href="{{ path('app_employee_leave_request_cancel', {id: leaveRequest.id}) }}" 
               style="padding: 0.5rem 1rem; background: #dc2626; color: white; border: none; border-radius: 6px; text-decoration: none; cursor: pointer;"
               onclick="return confirm('Derni√®re confirmation : voulez-vous vraiment annuler cette demande ?')">
                Oui, annuler
            </a>
        </div>
    </div>
</div>
{% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startDateInput = document.getElementById('start-date');
            const endDateInput = document.getElementById('end-date');
            const dateInfo = document.getElementById('date-info');
            const displayStartDate = document.getElementById('display-start-date');
            const displayEndDate = document.getElementById('display-end-date');
            const calculatedDays = document.getElementById('calculated-days');
            const numberOfDaysHidden = document.getElementById('number-of-days-hidden');
            const submitBtn = document.getElementById('submit-btn');

            // Seulement si la demande peut √™tre modifi√©e
            if (startDateInput && !startDateInput.disabled) {
                // Fonction pour calculer les jours ouvr√©s entre deux dates
                function calculateWorkingDays(startDate, endDate) {
                    if (!startDate || !endDate) return 0;
                    
                    const start = new Date(startDate);
                    const end = new Date(endDate);
                    
                    if (start > end) return 0;
                    
                    let workingDays = 0;
                    const currentDate = new Date(start);
                    
                    while (currentDate <= end) {
                        const dayOfWeek = currentDate.getDay();
                        // 0 = Dimanche, 6 = Samedi
                        if (dayOfWeek !== 0 && dayOfWeek !== 6) {
                            workingDays++;
                        }
                        currentDate.setDate(currentDate.getDate() + 1);
                    }
                    
                    return workingDays;
                }

                // Fonction pour formater une date en fran√ßais
                function formatDateFR(dateString) {
                    if (!dateString) return '-';
                    const date = new Date(dateString);
                    return date.toLocaleDateString('fr-FR', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                }

                // Fonction pour mettre √† jour l'affichage des informations de dates
                function updateDateInfo() {
                    const startDate = startDateInput.value;
                    const endDate = endDateInput.value;

                    if (startDate && endDate) {
                        const workingDays = calculateWorkingDays(startDate, endDate);
                        
                        displayStartDate.textContent = formatDateFR(startDate);
                        displayEndDate.textContent = formatDateFR(endDate);
                        calculatedDays.textContent = workingDays + ' jour' + (workingDays > 1 ? 's' : '');
                        numberOfDaysHidden.value = workingDays;
                        
                        // Validation des dates
                        const start = new Date(startDate);
                        const end = new Date(endDate);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        let isValid = true;
                        let errorMessage = '';
                        
                        if (start > end) {
                            isValid = false;
                            errorMessage = 'La date de fin doit √™tre post√©rieure √† la date de d√©but';
                        } else if (workingDays === 0) {
                            isValid = false;
                            errorMessage = 'La p√©riode s√©lectionn√©e ne contient aucun jour ouvr√©';
                        }
                        
                        if (!isValid && submitBtn) {
                            calculatedDays.innerHTML = '<span style="color: #dc2626;">' + errorMessage + '</span>';
                            submitBtn.disabled = true;
                            submitBtn.style.opacity = '0.5';
                        } else if (submitBtn) {
                            submitBtn.disabled = false;
                            submitBtn.style.opacity = '1';
                        }
                    }
                }

                // √âcouteurs d'√©v√©nements pour les champs de date
                startDateInput.addEventListener('change', updateDateInfo);
                endDateInput.addEventListener('change', updateDateInfo);

                // Validation du formulaire avant soumission
                const form = document.getElementById('leave-request-form');
                if (form) {
                    form.addEventListener('submit', function(e) {
                        const startDate = startDateInput.value;
                        const endDate = endDateInput.value;
                        const numberOfDays = parseInt(numberOfDaysHidden.value);

                        if (!startDate || !endDate) {
                            e.preventDefault();
                            alert('Veuillez s√©lectionner les dates de d√©but et de fin.');
                            return;
                        }

                        if (numberOfDays <= 0) {
                            e.preventDefault();
                            alert('La p√©riode s√©lectionn√©e doit contenir au moins un jour ouvr√©.');
                            return;
                        }

                        // Confirmation pour les modifications importantes
                        if (!confirm('√ätes-vous s√ªr de vouloir enregistrer ces modifications ? Votre manager sera notifi√© des changements.')) {
                            e.preventDefault();
                            return;
                        }

                        // Animation du bouton de soumission
                        if (submitBtn) {
                            submitBtn.innerHTML = '‚è≥ Enregistrement...';
                            submitBtn.disabled = true;
                        }
                    });
                }

                // Initialisation au chargement de la page
                updateDateInfo();
             
                // D√©finir la date minimum √† aujourd'hui pour les nouvelles demandes
                const today = new Date().toISOString().split('T')[0];
                startDateInput.setAttribute('min', today);
                endDateInput.setAttribute('min', today);

                // Gestion du changement de type de cong√©
                const leaveTypeSelect = document.getElementById('leave-type-select');
                if (leaveTypeSelect) {
                    leaveTypeSelect.addEventListener('change', function() {
                        // R√©initialiser les calculs quand le type change
                        updateDateInfo();
                        
                        // Afficher des informations sp√©cifiques selon le type
                        const selectedOption = this.options[this.selectedIndex];
                        if (selectedOption.dataset.requiresApproval === 'false') {
                            console.log('Ce type de cong√© ne n√©cessite pas d\'approbation');
                        }
                    });
                }

                // Validation en temps r√©el des dates
                function validateDates() {
                    const startDate = new Date(startDateInput.value);
                    const endDate = new Date(endDateInput.value);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);

                    // R√©initialiser les classes d'erreur
                    startDateInput.classList.remove('is-invalid');
                    endDateInput.classList.remove('is-invalid');

                    // Validation de la date de d√©but
                    if (startDate < today) {
                        startDateInput.classList.add('is-invalid');
                        return false;
                    }

                    // Validation de la date de fin
                    if (endDate < startDate) {
                        endDateInput.classList.add('is-invalid');
                        return false;
                    }

                    return true;
                }

                // Ajouter la validation en temps r√©el
                startDateInput.addEventListener('blur', validateDates);
                endDateInput.addEventListener('blur', validateDates);
            }
        });

        // Fonction pour ouvrir le modal d'annulation
        function cancelRequest() {
            document.getElementById('cancelModal').style.display = 'block';
            document.body.style.overflow = 'hidden'; // Emp√™cher le scroll
        }

        // Fonction pour fermer le modal d'annulation
        function closeCancelModal() {
            document.getElementById('cancelModal').style.display = 'none';
            document.body.style.overflow = 'auto'; // Restaurer le scroll
        }

        // Fermer le modal en cliquant √† l'ext√©rieur
        document.addEventListener('click', function(e) {
            const modal = document.getElementById('cancelModal');
            if (modal && e.target === modal) {
                closeCancelModal();
            }
        });

        // Fermer le modal avec la touche √âchap
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const modal = document.getElementById('cancelModal');
                if (modal && modal.style.display === 'block') {
                    closeCancelModal();
                }
            }
        });

        // Gestion des notifications de succ√®s/erreur (si pr√©sentes dans la session)
        {% if app.session.flashbag.peek('success')|length > 0 %}
            // Afficher une notification de succ√®s
            setTimeout(function() {
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #10b981;
                    color: white;
                    padding: 1rem 2rem;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    z-index: 1001;
                    opacity: 0;
                    transition: opacity 0.3s ease;
                `;
                notification.innerHTML = '‚úÖ {{ app.session.flashbag.get('success')[0] }}';
                document.body.appendChild(notification);
                
                setTimeout(() => notification.style.opacity = '1', 100);
                setTimeout(() => {
                    notification.style.opacity = '0';
                    setTimeout(() => document.body.removeChild(notification), 300);
                }, 3000);
            }, 500);
        {% endif %}

        {% if app.session.flashbag.peek('error')|length > 0 %}
            // Afficher une notification d'erreur
            setTimeout(function() {
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #dc2626;
                    color: white;
                    padding: 1rem 2rem;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    z-index: 1001;
                    opacity: 0;
                    transition: opacity 0.3s ease;
                `;
                notification.innerHTML = '‚ùå {{ app.session.flashbag.get('error')[0] }}';
                document.body.appendChild(notification);
                
                setTimeout(() => notification.style.opacity = '1', 100);
                setTimeout(() => {
                    notification.style.opacity = '0';
                    setTimeout(() => document.body.removeChild(notification), 300);
                }, 5000);
            }, 500);
        {% endif %}

        // Animation d'entr√©e pour la page
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('.leave-request-form');
            if (form) {
                form.style.opacity = '0';
                form.style.transform = 'translateY(20px)';
                form.style.transition = 'all 0.5s ease';
                
                setTimeout(() => {
                    form.style.opacity = '1';
                    form.style.transform = 'translateY(0)';
                }, 100);
            }
        });

        // Sauvegarde automatique en brouillon (optionnelle)
        let autoSaveTimeout;
        function autoSave() {
            clearTimeout(autoSaveTimeout);
            autoSaveTimeout = setTimeout(() => {
                const formData = new FormData(document.getElementById('leave-request-form'));
                const data = Object.fromEntries(formData);
                
                // Sauvegarder en localStorage pour r√©cup√©ration en cas de probl√®me
                localStorage.setItem('leave_request_draft_{{ leaveRequest.id }}', JSON.stringify({
                    data: data,
                    timestamp: new Date().toISOString()
                }));
                
                console.log('Brouillon sauvegard√© automatiquement');
            }, 2000); // Sauvegarder 2 secondes apr√®s la derni√®re modification
        }

        // Activer la sauvegarde automatique sur les champs modifiables
        document.addEventListener('DOMContentLoaded', function() {
            const inputs = document.querySelectorAll('#leave-request-form input:not([disabled]), #leave-request-form select:not([disabled]), #leave-request-form textarea:not([disabled])');
            inputs.forEach(input => {
                input.addEventListener('input', autoSave);
                input.addEventListener('change', autoSave);
            });
        });

        // Restaurer le brouillon au chargement (si disponible)
        document.addEventListener('DOMContentLoaded', function() {
            const draftKey = 'leave_request_draft_{{ leaveRequest.id }}';
            const draft = localStorage.getItem(draftKey);
            
            if (draft) {
                try {
                    const draftData = JSON.parse(draft);
                    const draftAge = (new Date() - new Date(draftData.timestamp)) / (1000 * 60); // √¢ge en minutes
                    
                    // Proposer la restauration si le brouillon a moins de 30 minutes
                    if (draftAge < 30) {
                        if (confirm('Un brouillon de cette demande a √©t√© trouv√© (sauvegard√© il y a ' + Math.round(draftAge) + ' minutes). Voulez-vous le restaurer ?')) {
                            // Restaurer les donn√©es du brouillon
                            Object.entries(draftData.data).forEach(([key, value]) => {
                                const element = document.querySelector(`[name="${key}"]`);
                                if (element && !element.disabled) {
                                    element.value = value;
                                    element.dispatchEvent(new Event('change'));
                                }
                            });
                        }
                    }
                    
                    // Nettoyer les anciens brouillons
                    if (draftAge > 60) { // Plus de 1 heure
                        localStorage.removeItem(draftKey);
                    }
                } catch (e) {
                    console.error('Erreur lors de la restauration du brouillon:', e);
                    localStorage.removeItem(draftKey);
                }
            }
        });

        // Nettoyer le brouillon apr√®s soumission r√©ussie
        document.getElementById('leave-request-form').addEventListener('submit', function() {
            localStorage.removeItem('leave_request_draft_{{ leaveRequest.id }}');
        });
    </script>
{% endblock %}
