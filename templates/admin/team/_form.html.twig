{# Template de formulaire réutilisable pour les équipes #}

<style>
    .team-form-container {
        max-width: 100%;
    }
    
    .form-section {
        margin-bottom: 30px;
        background: #fff;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .section-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 15px 20px;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .section-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #495057;
        margin: 0;
    }
    
    .section-content {
        padding: 25px 20px;
    }
    
    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }
    
    .form-col {
        flex: 1;
    }
    
    .form-col-12 {
        width: 100%;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #495057;
        font-size: 0.95rem;
    }
    
    .required-field::after {
        content: " *";
        color: #dc3545;
        font-weight: bold;
    }
    
    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        font-size: 1rem;
        line-height: 1.5;
        transition: all 0.3s ease;
        box-sizing: border-box;
        font-family: inherit;
    }
    
    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
        background-color: #fff;
    }
    
    .form-control:hover:not(:focus) {
        border-color: #ced4da;
    }
    
    .form-control.is-invalid {
        border-color: #dc3545;
        background-color: #fdf2f2;
    }
    
    .form-control.is-valid {
        border-color: #28a745;
        background-color: #f2fdf2;
    }
    
    .form-select {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23495057' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 12px center;
        background-size: 16px 12px;
        padding-right: 40px;
        cursor: pointer;
    }
    
    .form-select:focus {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23007bff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");
    }
    
    .form-textarea {
        resize: vertical;
        min-height: 100px;
    }
    
    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 6px;
        line-height: 1.4;
    }
    
    .form-text.help-block {
        display: flex;
        align-items: flex-start;
        gap: 6px;
    }
    
    .form-text .icon {
        color: #007bff;
        margin-top: 2px;
        flex-shrink: 0;
    }
    
    .form-errors {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
        padding: 10px 15px;
        margin-top: 8px;
        color: #721c24;
        font-size: 0.875rem;
    }
    
    .form-errors ul {
        margin: 0;
        padding-left: 20px;
        list-style-type: disc;
    }
    
    .form-errors li {
        margin-bottom: 5px;
    }
    
    .checkbox-group {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 15px;
        background-color: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .checkbox-group:hover {
        background-color: #e9ecef;
        border-color: #ced4da;
    }
    
    .checkbox-group.checked {
        background-color: #e7f3ff;
        border-color: #007bff;
    }
    
    .checkbox-input {
        width: 18px;
        height: 18px;
        margin: 0;
        cursor: pointer;
        accent-color: #007bff;
    }
    
    .checkbox-label {
        margin: 0;
        cursor: pointer;
        user-select: none;
        font-weight: 500;
        color: #495057;
    }
    
    .checkbox-description {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 5px;
        line-height: 1.4;
    }
    
    .input-group {
        display: flex;
        align-items: stretch;
    }
    
    .input-group-prepend,
    .input-group-append {
        display: flex;
        align-items: center;
    }
    
    .input-group-text {
        padding: 12px 15px;
        background-color: #e9ecef;
        border: 2px solid #e9ecef;
        color: #495057;
        font-weight: 500;
    }
    
    .input-group-prepend .input-group-text {
        border-right: none;
        border-radius: 6px 0 0 6px;
    }
    
    .input-group-append .input-group-text {
        border-left: none;
        border-radius: 0 6px 6px 0;
    }
    
    .input-group .form-control {
        border-radius: 0;
    }
    
    .input-group .form-control:first-child {
        border-radius: 6px 0 0 6px;
    }
    
    .input-group .form-control:last-child {
        border-radius: 0 6px 6px 0;
    }
    
    .form-validation-summary {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 6px;
        padding: 15px 20px;
        margin-bottom: 25px;
        color: #721c24;
    }
    
    .form-validation-summary h4 {
        margin: 0 0 10px 0;
        font-size: 1rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .form-validation-summary ul {
        margin: 0;
        padding-left: 25px;
    }
    
    .loading-overlay {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255,255,255,0.8);
        border-radius: 8px;
        z-index: 10;
    }
    
    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        align-items: center;
        gap: 10px;
        color: #007bff;
        font-weight: 500;
    }
    
    .spinner {
        width: 20px;
        height: 20px;
        border: 2px solid #e3f2fd;
        border-top: 2px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        .form-row {
            flex-direction: column;
            gap: 15px;
        }
        
        .section-content {
            padding: 20px 15px;
        }
        
        .form-control {
            padding: 14px;
            font-size: 16px; /* Évite le zoom sur iOS */
        }
        
        .checkbox-group {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
        }
    }
    
    /* États d'animation */
    .form-section {
        animation: slideInUp 0.3s ease-out;
    }
    
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Focus visible pour l'accessibilité */
    .form-control:focus-visible,
    .checkbox-input:focus-visible {
        outline: 2px solid #007bff;
        outline-offset: 2px;
    }
</style>

<div class="team-form-container">
    <!-- Résumé des erreurs de validation -->
    {% if not form.vars.valid %}
        <div class="form-validation-summary">
            <h4>
                <i class="fas fa-exclamation-triangle"></i>
                Veuillez corriger les erreurs suivantes :
            </h4>
            <ul>
                {% for child in form.children %}
                    {% if child.vars.errors|length > 0 %}
                        {% for error in child.vars.errors %}
                            <li>{{ child.vars.label|default(child.vars.name) }} : {{ error.message }}</li>
                        {% endfor %}
                    {% endif %}
                {% endfor %}
            </ul>
        </div>
    {% endif %}

    {{ form_start(form, {
        'attr': {
            'novalidate': 'novalidate',
            'class': 'team-form',
            'data-toggle': 'validator'
        }
    }) }}
    
    <!-- Section : Informations de base -->
    <div class="form-section">
        <div class="section-header">
            <i class="fas fa-info-circle"></i>
            <h3 class="section-title">Informations de base</h3>
        </div>
        <div class="section-content">
            <div class="form-row">
                <div class="form-col">
                    <div class="form-group">
                        {{ form_label(form.name, 'Nom de l\'équipe', {
                            'label_attr': {'class': 'form-label required-field'}
                        }) }}
                        
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fas fa-users"></i>
                                </span>
                            </div>
                            {{ form_widget(form.name, {
                                'attr': {
                                    'class': 'form-control',
                                    'placeholder': 'Ex: Équipe Marketing',
                                    'maxlength': 100,
                                    'data-validation': 'required',
                                    'data-validation-length': 'min2'
                                }
                            }) }}
                        </div>
                        
                        {% if form.name.vars.errors|length > 0 %}
                            <div class="form-errors">
                                {{ form_errors(form.name) }}
                            </div>
                        {% endif %}
                        
                        <div class="form-text help-block">
                            <i class="fas fa-lightbulb icon"></i>
                            <span>
                                Choisissez un nom court et descriptif qui permettra d'identifier facilement l'équipe. 
                                Maximum 100 caractères.
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-col-12">
                    <div class="form-group">
                        {{ form_label(form.description, 'Description de l\'équipe', {
                            'label_attr': {'class': 'form-label'}
                        }) }}
                        
                        {{ form_widget(form.description, {
                            'attr': {
                                'class': 'form-control form-textarea',
                                'placeholder': 'Décrivez le rôle, les responsabilités et la mission de cette équipe...',
                                'rows': 4,
                                'maxlength': 500
                            }
                        }) }}
                        
                        {% if form.description.vars.errors|length > 0 %}
                            <div class="form-errors">
                                {{ form_errors(form.description) }}
                            </div>
                        {% endif %}
                        
                        <div class="form-text help-block">
                            <i class="fas fa-edit icon"></i>
                            <span>
                                Description optionnelle mais recommandée. Elle aide à comprendre le rôle de l'équipe 
                                dans l'organisation. Maximum 500 caractères.
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Section : Organisation et hiérarchie -->
    <div class="form-section">
        <div class="section-header">
            <i class="fas fa-sitemap"></i>
            <h3 class="section-title">Organisation et hiérarchie</h3>
        </div>
        <div class="section-content">
            <div class="form-row">
                <div class="form-col">
                    <div class="form-group">
                        {{ form_label(form.department_id, 'Département', {
                            'label_attr': {'class': 'form-label required-field'}
                        }) }}
                        
                        {{ form_widget(form.department_id, {
                            'attr': {
                                'class': 'form-control form-select',
                                'data-validation': 'required'
                            }
                        }) }}
                        
                        {% if form.department_id.vars.errors|length > 0 %}
                            <div class="form-errors">
                                {{ form_errors(form.department_id) }}
                            </div>
                        {% endif %}
                        
                        <div class="form-text help-block">
                            <i class="fas fa-building icon"></i>
                            <span>
                                Sélectionnez le département auquel cette équipe appartient. 
                                Cette information est obligatoire pour l'organisation hiérarchique.
                            </span>
                        </div>
                    </div>
                </div>
                
                <div class="form-col">
                    <div class="form-group">
                        {{ form_label(form.leader_id, 'Chef d\'équipe', {
                            'label_attr': {'class': 'form-label'}
                        }) }}
                        
                        {{ form_widget(form.leader_id, {
                            'attr': {
                                'class': 'form-control form-select'
                            }
                        }) }}
                        
                        {% if form.leader_id.vars.errors|length > 0 %}
                            <div class="form-errors">
                                {{ form_errors(form.leader_id) }}
                            </div>
                        {% endif %}
                        
                        <div class="form-text help-block">
                            <i class="fas fa-user-tie icon"></i>
                            <span>
                                Choisissez un employé pour diriger cette équipe. Ce champ est optionnel 
                                et peut être défini ultérieurement.
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Section : Paramètres et statut -->
    <div class="form-section">
        <div class="section-header">
            <i class="fas fa-cog"></i>
            <h3 class="section-title">Paramètres et statut</h3>
        </div>
        <div class="section-content">
            <div class="form-row">
                <div class="form-col-12">
                    <div class="form-group">
                        <div class="checkbox-group" id="active-checkbox-group">
                            {{ form_widget(form.isActive, {
                                'attr': {
                                    'class': 'checkbox-input',
                                    'id': 'team_isActive_checkbox'
                                }
                            }) }}
                            
                            <div>
                                {{ form_label(form.isActive, 'Équipe active', {
                                    'label_attr': {
                                        'class': 'checkbox-label',
                                        'for': 'team_isActive_checkbox'
                                    }
                                }) }}
                                
                                <div class="checkbox-description">
                                    Une équipe active est visible dans toutes les sélections et peut recevoir 
                                    de nouveaux membres. Une équipe inactive est masquée mais conserve son historique.
                                </div>
                            </div>
                        </div>
                        
                        {% if form.isActive.vars.errors|length > 0 %}
                            <div class="form-errors">
                                {{ form_errors(form.isActive) }}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Overlay de chargement -->
    <div class="loading-overlay" id="form-loading">
        <div class="loading-spinner">
            <div class="spinner"></div>
            <span>Enregistrement en cours...</span>
        </div>
    </div>

    {{ form_end(form) }}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.team-form');
    const nameInput = document.querySelector('#team_name');
    const descriptionTextarea = document.querySelector('#team_description');
    const activeCheckbox = document.querySelector('#team_isActive_checkbox');
    const activeCheckboxGroup = document.querySelector('#active-checkbox-group');
    
    // Gestion du groupe checkbox
    if (activeCheckbox && activeCheckboxGroup) {
        function updateCheckboxGroup() {
            if (activeCheckbox.checked) {
                activeCheckboxGroup.classList.add('checked');
            } else {
                activeCheckboxGroup.classList.remove('checked');
            }
        }
        
        activeCheckbox.addEventListener('change', updateCheckboxGroup);
        activeCheckboxGroup.addEventListener('click', function(e) {
            if (e.target !== activeCheckbox) {
                activeCheckbox.checked = !activeCheckbox.checked;
                updateCheckboxGroup();
            }
        });
        
        // État initial
        updateCheckboxGroup();
    }
    
    // Validation en temps réel du nom
    if (nameInput) {
        nameInput.addEventListener('input', function() {
            const value = this.value.trim();
            
            if (value.length === 0) {
                this.classList.remove('is-valid', 'is-invalid');
            } else if (value.length < 2) {
                this.classList.add('is-invalid');
                this.classList.remove('is-valid');
            } else {
                this.classList.add('is-valid');
                this.classList.remove('is-invalid');
            }
        });
        
        nameInput.addEventListener('blur', function() {
            if (this.value.trim().length === 0) {
                this.classList.add('is-invalid');
                this.classList.remove('is-valid');
            }
        });
    }
    
    // Compteur de caractères pour la description
    if (descriptionTextarea) {
        const maxLength = 500;
        const counterElement = document.createElement('div');
        counterElement.className = 'form-text';
        counterElement.style.textAlign = 'right';
        counterElement.style.marginTop = '5px';
        
        function updateCounter() {
            const remaining = maxLength - descriptionTextarea.value.length;
            counterElement.textContent = `${remaining} caractères restants`;
            
            if (remaining < 50) {
                counterElement.style.color = '#dc3545';
            } else if (remaining < 100) {
                counterElement.style.color = '#ffc107';
            } else {
                counterElement.style.color = '#6c757d';
            }
        }
        
        descriptionTextarea.parentNode.appendChild(counterElement);
        descriptionTextarea.addEventListener('input', updateCounter);
        updateCounter();
    }
    
    // Animation de soumission
    if (form) {
        form.addEventListener('submit', function(e) {
            const loadingOverlay = document.querySelector('#form-loading');
            if (loadingOverlay) {
                loadingOverlay.style.display = 'block';
            }
            
            // Désactiver le bouton de soumission pour éviter les doubles soumissions
            const submitButtons = form.querySelectorAll('button[type="submit"]');
            submitButtons.forEach(button => {
                button.disabled = true;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enregistrement...';
                
                // Restaurer si erreur côté client
                setTimeout(() => {
                    if (loadingOverlay.style.display === 'block') {
                        button.disabled = false;
                        button.innerHTML = originalText;
                        loadingOverlay.style.display = 'none';
                    }
                }, 10000); // Timeout de 10 secondes
            });
        });
    }
    
    // Auto-resize pour les textareas
    function autoResize(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = textarea.scrollHeight + 'px';
    }
    
    if (descriptionTextarea) {
        descriptionTextarea.addEventListener('input', function() {
            autoResize(this);
        });
        
        // Resize initial
        autoResize(descriptionTextarea);
    }
    
    // Amélioration de l'accessibilité : navigation au clavier
    const formControls = form.querySelectorAll('.form-control, .checkbox-input');
    formControls.forEach((control, index) => {
        control.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && this.tagName !== 'TEXTAREA') {
                e.preventDefault();
                const nextControl = formControls[index + 1];
                if (nextControl) {
                    nextControl.focus();
                } else {
                    // Focus sur le bouton de soumission
                    const submitButton = form.querySelector('button[type="submit"]');
                    if (submitButton) {
                        submitButton.focus();
                    }
                }
            }
        });
    });
    
    // Sauvegarde automatique en localStorage (optionnel)
    const autoSaveKey = 'team_form_autosave_' + (form.dataset.teamId || 'new');
    
    function saveFormData() {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        localStorage.setItem(autoSaveKey, JSON.stringify(data));
    }
    
    function loadFormData() {
        const savedData = localStorage.getItem(autoSaveKey);
        if (savedData && confirm('Des données non sauvegardées ont été trouvées. Voulez-vous les restaurer ?')) {
            try {
                const data = JSON.parse(savedData);
                Object.keys(data).forEach(key => {
                    const field = form.querySelector(`[name="${key}"]`);
                    if (field && field.value === '') {
                        if (field.type === 'checkbox') {
                            field.checked = data[key] === 'on';
                        } else {
                            field.value = data[key];
                        }
                    }
                });
            } catch (e) {
                console.error('Erreur lors du chargement des données sauvegardées:', e);
            }
        }
    }
    
    // Sauvegarder périodiquement
    setInterval(saveFormData, 30000); // Toutes les 30 secondes
    
    // Charger au démarrage
    loadFormData();
    
    // Nettoyer après soumission réussie
    form.addEventListener('submit', function() {
        localStorage.removeItem(autoSaveKey);
    });
});
</script>